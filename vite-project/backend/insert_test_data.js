#!/usr/bin/env node

import pool from './db.js';

const insertTestData = async () => {
  const client = await pool.connect();
  
  try {
    console.log('üîó Connecting to bikerental database...');
    
    // Start transaction
    await client.query('BEGIN');
    
    console.log('üèóÔ∏è Inserting comprehensive test data...\n');
    
    // 1. USERS (5-7 users) - Mix of employees, mechanics, managers
    console.log('1. Inserting users...');
    const usersData = [
      ['–ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á', 'sergey.ivanov@bikerental.ru', '+7-925-123-4567', 'manager'],
      ['–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', 'anna.petrova@bikerental.ru', '+7-916-987-6543', 'mechanic'],
      ['Smith John', 'john.smith@bikerental.ru', '+7-903-555-0123', 'employee'],
      ['–ö–æ–∑–ª–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', null, '+7-905-777-8899', 'mechanic'],
      ['Johnson Sarah', 'sarah.j@bikerental.ru', null, 'employee'],
      ['–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', 'alexey.sidorov@bikerental.ru', '+7-926-444-3333', 'manager'],
      ['Garcia Maria', null, '+7-915-222-1111', 'employee']
    ];
    
    const userIds = [];
    for (const [name, email, phone, role] of usersData) {
      const result = await client.query(`
        INSERT INTO users (name, email, phone, role, is_active) 
        VALUES ($1, $2, $3, $4, true) 
        RETURNING id
      `, [name, email, phone, role]);
      userIds.push(result.rows[0].id);
    }
    console.log(`   ‚úÖ Inserted ${userIds.length} users`);
    
    // 2. BIKES (10-15 bikes) - Variety of bikes with different statuses
    console.log('2. Inserting bikes...');
    const bikesData = [
      ['Trek Mountain Explorer', 'X-Caliber 8', 'Trek', 'M', '–°–∏–Ω–∏–π', '2023-03-15', 85000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 5],
      ['Giant Road Racer', 'Defy Advanced 2', 'Giant', 'L', '–ß–µ—Ä–Ω—ã–π', '2023-01-20', 120000, '–∞—Ä–µ–Ω–¥–æ–≤–∞–Ω', 4],
      ['Specialized City Cruiser', 'Sirrus X 3.0', 'Specialized', 'S', '–ö—Ä–∞—Å–Ω—ã–π', '2022-11-10', 95000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 5],
      ['Merida All-Terrain', 'Big.Nine 500', 'Merida', 'XL', '–ó–µ–ª–µ–Ω—ã–π', '2023-05-08', 75000, '–≤ —Ä–µ–º–æ–Ω—Ç–µ', 3],
      ['Cannondale Urban', 'Quick CX 3', 'Cannondale', 'M', '–ë–µ–ª—ã–π', '2023-02-14', 68000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 4],
      ['Scott Mountain Pro', 'Aspect 940', 'Scott', 'L', '–û—Ä–∞–Ω–∂–µ–≤—ã–π', '2022-12-05', 82000, '–∞—Ä–µ–Ω–¥–æ–≤–∞–Ω', 5],
      ['Cube Hybrid', 'Nature Hybrid One', 'Cube', 'M', '–°–µ—Ä—ã–π', '2023-04-22', 105000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 4],
      ['GT Urban Rider', 'Transeo Comp', 'GT', 'S', '–°–∏–Ω–∏–π', '2022-10-18', 55000, '–≤ —Ä–µ–º–æ–Ω—Ç–µ', 2],
      ['KTM Adventure', 'Chicago Disc 291', 'KTM', 'L', '–ß–µ—Ä–Ω—ã–π', '2023-06-12', 78000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 5],
      ['Bianchi Classic', 'C-Sport 1', 'Bianchi', 'M', '–ë–µ–ª—ã–π', '2023-01-08', 92000, '–∞—Ä–µ–Ω–¥–æ–≤–∞–Ω', 4],
      ['Stels Navigator', 'Navigator 600 MD', 'Stels', 'XL', '–ó–µ–ª–µ–Ω—ã–π', '2022-09-25', 35000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 3],
      ['Forward City Bike', 'Barcelona 2.0', 'Forward', 'S', '–†–æ–∑–æ–≤—ã–π', '2023-03-30', 28000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 5],
      ['Kona Trail', 'Process 134', 'Kona', 'L', '–û—Ä–∞–Ω–∂–µ–≤—ã–π', '2023-07-01', 140000, '–≤ —Ä–µ–º–æ–Ω—Ç–µ', 4],
      ['Norco Endurance', 'Search XR C2', 'Norco', 'M', '–°–µ—Ä—ã–π', '2022-11-28', 115000, '–≤ –Ω–∞–ª–∏—á–∏–∏', 4],
      ['Felt Speed', 'Verza Speed 40', 'Felt', 'S', '–ö—Ä–∞—Å–Ω—ã–π', '2023-02-20', 72000, '–∞—Ä–µ–Ω–¥–æ–≤–∞–Ω', 5]
    ];
    
    const bikeIds = [];
    for (const [name, model, brand, size, color, purchaseDate, price, status, condition] of bikesData) {
      const result = await client.query(`
        INSERT INTO bikes (name, model, brand, size, color, purchase_date, purchase_price, status, condition_rating) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) 
        RETURNING id
      `, [name, model, brand, size, color, purchaseDate, price, status, condition]);
      bikeIds.push(result.rows[0].id);
    }
    console.log(`   ‚úÖ Inserted ${bikeIds.length} bikes`);
    
    // 3. PART MODELS (15-20 parts) - Common bike parts
    console.log('3. Inserting part models...');
    const partModelsData = [
      ['–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Shimano', '—Ç–æ—Ä–º–æ–∑–∞', 'Shimano', 'BR-M315', '–î–∏—Å–∫–æ–≤—ã–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏', 850, 'VeloShop', 'Y8FN98010'],
      ['–¶–µ–ø—å KMC X11', '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è', 'KMC', 'X11-93', '11-—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è —Ü–µ–ø—å', 2400, 'BikeWorld', 'X11-93-GD'],
      ['–ü–æ–∫—Ä—ã—à–∫–∞ Continental', '–∫–æ–ª–µ—Å–∞', 'Continental', 'Grand Prix 5000', '700x25c —à–æ—Å—Å–µ–π–Ω–∞—è', 4500, 'TireExpress', 'GP5000-70025'],
      ['–ö–∞–º–µ—Ä–∞ Schwalbe 26"', '–∫–æ–ª–µ—Å–∞', 'Schwalbe', 'SV13', '–ö–∞–º–µ—Ä–∞ 26x1.5-2.4', 650, 'VeloShop', 'SV13-26'],
      ['–ó–≤–µ–∑–¥–æ—á–∫–∏ Sram', '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è', 'Sram', 'PG-1130', '–ö–∞—Å—Å–µ—Ç–∞ 11-42T', 3200, 'BikeWorld', 'PG1130-1142'],
      ['–§–æ–Ω–∞—Ä—å –ø–µ—Ä–µ–¥–Ω–∏–π Cateye', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', 'Cateye', 'Volt 800', 'USB –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ–º—ã–π', 5800, 'LightStore', 'HL-EL471RC'],
      ['–§–æ–Ω–∞—Ä—å –∑–∞–¥–Ω–∏–π Lezyne', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', 'Lezyne', 'Strip Drive', 'LED –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å', 2100, 'LightStore', 'LZN-STRIP'],
      ['–°–µ–¥–ª–æ Selle Royal', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'Selle Royal', 'Scientia M1', '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–µ–¥–ª–æ', 3800, 'ComfortRide', 'SR-SCI-M1'],
      ['–ì—Ä–∏–ø—Å—ã Ergon', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'Ergon', 'GA2 Fat', '–ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏–µ —Ä—É—á–∫–∏', 2900, 'ComfortRide', 'GA2-FAT-L'],
      ['–¢—Ä–æ—Å–∏–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π Jagwire', '—Ç–æ—Ä–º–æ–∑–∞', 'Jagwire', 'Elite Link', '–ù–µ—Ä–∂–∞–≤–µ—é—â–∏–π —Ç—Ä–æ—Å', 450, 'VeloShop', 'JW-ELK-2000'],
      ['–†—É–±–∞—à–∫–∞ —Ç—Ä–æ—Å–∏–∫–∞ Jagwire', '—Ç–æ—Ä–º–æ–∑–∞', 'Jagwire', 'Elite Link', '–û–ø–ª–µ—Ç–∫–∞ —Ç—Ä–æ—Å–∞ 5–º–º', 320, 'VeloShop', 'JW-ELK-5MM'],
      ['–ü–µ–¥–∞–ª–∏ Shimano SPD', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'Shimano', 'PD-M540', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ø–µ–¥–∞–ª–∏', 4200, 'BikeWorld', 'PD-M540-BK'],
      ['–û—Å—å –∑–∞–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞', '–∫–æ–ª–µ—Å–∞', 'Novatec', 'D142SB', '–í—Ç—É–ª–∫–∞ 142x12 Thru', 2800, 'WheelTech', 'D142SB-32H'],
      ['–°–ø–∏—Ü—ã DT Swiss', '–∫–æ–ª–µ—Å–∞', 'DT Swiss', 'Competition', '2.0/1.8/2.0 –º–º', 85, 'WheelTech', 'DT-COMP-264'],
      ['–°–º–∞–∑–∫–∞ —Ü–µ–ø–∏ Finish Line', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'Finish Line', 'Wet Lube', '–í–ª–∞–∂–Ω–∞—è —Å–º–∞–∑–∫–∞ 60–º–ª', 750, 'VeloShop', 'FL-WET-60'],
      ['–û–±–µ–∑–∂–∏—Ä–∏–≤–∞—Ç–µ–ª—å Muc-Off', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'Muc-Off', 'Degreaser', '–û—á–∏—Å—Ç–∏—Ç–µ–ª—å 500–º–ª', 1200, 'VeloShop', 'MO-DEG-500'],
      ['–®–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫ Park Tool', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'Park Tool', 'AWS-10', '–ù–∞–±–æ—Ä –∫–ª—é—á–µ–π 1.5-10–º–º', 3500, 'ToolMaster', 'PK-AWS10'],
      ['–ù–∞—Å–æ—Å –Ω–∞–ø–æ–ª—å–Ω—ã–π Topeak', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'Topeak', 'Joe Blow Sport', '–° –º–∞–Ω–æ–º–µ—Ç—Ä–æ–º –¥–æ 11 bar', 4800, 'ToolMaster', 'TK-JBS'],
  ];
    
    const partModelIds = [];
    for (const [name, category, brand, model, description, price, supplier, partNumber] of partModelsData) {
      const result = await client.query(`
        INSERT INTO part_models (name, category, brand, model, description, unit_price, supplier, part_number) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
        RETURNING id
      `, [name, category, brand, model, description, price, supplier, partNumber]);
      partModelIds.push(result.rows[0].id);
    }
    console.log(`   ‚úÖ Inserted ${partModelIds.length} part models`);
    
    // 4. PART STOCK - Inventory for all part models
    console.log('4. Inserting part stock...');
    const warehouseLocations = ['–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', '–°–∫–ª–∞–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π', '–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è', '–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–∫–ª–∞–¥'];
    
    for (let i = 0; i < partModelIds.length; i++) {
      const quantity = Math.floor(Math.random() * 50) + 1; // 1-50 items
      const minStock = Math.floor(Math.random() * 10) + 2; // 2-11 minimum
      const maxStock = Math.floor(Math.random() * 40) + 60; // 60-99 maximum
      const location = warehouseLocations[Math.floor(Math.random() * warehouseLocations.length)];
      
      await client.query(`
        INSERT INTO part_stock (part_model_id, quantity, min_stock, max_stock, warehouse_location) 
        VALUES ($1, $2, $3, $4, $5)
      `, [partModelIds[i], quantity, minStock, maxStock, location]);
    }
    console.log(`   ‚úÖ Inserted stock records for ${partModelIds.length} parts`);
    
    // 5. PURCHASE REQUESTS (5-8 requests) - Mix of statuses
    console.log('5. Inserting purchase requests...');
    const purchaseRequestsData = [
      [partModelIds[0], 20, '–ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫', 'pending', userIds[1], true, null],
      [partModelIds[2], 5, '–ó–∞–∫–∞–∑ –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', 'approved', userIds[0], false, userIds[5]],
      [partModelIds[5], 3, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–µ —Ñ–æ–Ω–∞—Ä–∏', 'pending', userIds[2], false, null],
      [partModelIds[8], 10, '–ó–∞–º–µ–Ω–∞ –∏–∑–Ω–æ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∏–ø—Å', 'approved', userIds[3], false, userIds[0]],
      [partModelIds[12], 2, '–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∫–æ–ª–µ—Å–∞', 'pending', userIds[1], true, null],
      [partModelIds[15], 6, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'approved', userIds[4], false, userIds[5]],
      [partModelIds[7], 4, '–ó–∞–º–µ–Ω–∞ —Å–µ–¥–µ–ª –Ω–∞ –∞—Ä–µ–Ω–¥–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö', 'pending', userIds[2], false, null],
      [partModelIds[14], 12, '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'approved', userIds[1], false, userIds[0]]
    ];
    
    for (const [partId, quantity, reason, status, requestedBy, urgent, approvedBy] of purchaseRequestsData) {
      await client.query(`
        INSERT INTO purchase_requests (part_model_id, requested_quantity, reason, status, requested_by, urgent, approved_by, approved_at) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [partId, quantity, reason, status, requestedBy, urgent, approvedBy, 
          approvedBy ? new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) : null]);
    }
    console.log(`   ‚úÖ Inserted ${purchaseRequestsData.length} purchase requests`);
    
    // 6. MAINTENANCE EVENTS (8-12 events) - Various repair scenarios
    console.log('6. Inserting maintenance events...');
    const maintenanceData = [
      [bikeIds[1], '–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-15 09:00:00', '2024-01-15 11:30:00', '2024-01-15', '–ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–Ω–æ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫', userIds[1]],
      [bikeIds[3], '–†–µ–º–æ–Ω—Ç —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', '2024-01-20 10:00:00', null, '2024-01-20', '–ó–∞–º–µ–Ω–∞ —Ü–µ–ø–∏ –∏ –∫–∞—Å—Å–µ—Ç—ã', userIds[3]],
      [bikeIds[7], '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤–∞—Ä–∏–∏', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', null, null, '2024-01-25', '–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Ä–∞–º—ã', userIds[1]],
      [bikeIds[12], '–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', '2024-01-18 14:00:00', null, '2024-01-18', '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', userIds[3]],
      [bikeIds[0], '–ó–∞–º–µ–Ω–∞ –ø–æ–∫—Ä—ã—à–∫–∏', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-10 15:30:00', '2024-01-10 16:45:00', '2024-01-10', '–ü—Ä–æ–∫–æ–ª –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞', userIds[1]],
      [bikeIds[5], '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–º–æ–∑–æ–≤', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-12 11:00:00', '2024-01-12 12:15:00', '2024-01-12', '–°–ª–∞–±–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ', userIds[3]],
      [bikeIds[9], '–ó–∞–º–µ–Ω–∞ —Å–µ–¥–ª–∞', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', null, null, '2024-01-28', '–ñ–∞–ª–æ–±—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç', userIds[1]],
      [bikeIds[2], '–ß–∏—Å—Ç–∫–∞ –∏ —Å–º–∞–∑–∫–∞', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-08 09:30:00', '2024-01-08 10:30:00', '2024-01-08', '–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', userIds[3]],
      [bikeIds[11], '–ó–∞–º–µ–Ω–∞ –≥—Ä–∏–ø—Å', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', '2024-01-22 13:00:00', null, '2024-01-22', '–ò–∑–Ω–æ—à–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Ä—É—á–∫–∏', userIds[1]],
      [bikeIds[6], '–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-14 16:00:00', '2024-01-14 17:30:00', '2024-01-14', '–ü–ª–æ—Ö–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π', userIds[3]],
      [bikeIds[13], '–ó–∞–º–µ–Ω–∞ —Ç—Ä–æ—Å–∏–∫–æ–≤', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', null, null, '2024-01-30', '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞', userIds[1]],
      [bikeIds[4], '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞—Ä–µ–π', '–∑–∞–≤–µ—Ä—à–µ–Ω', '2024-01-16 10:15:00', '2024-01-16 11:00:00', '2024-01-16', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è', userIds[3]]
    ];
    
    const maintenanceIds = [];
    for (const [bikeId, type, status, startDate, endDate, plannedDate, notes, executor] of maintenanceData) {
      const result = await client.query(`
        INSERT INTO maintenance_events (bike_id, "—Ç–∏–ø_—Ä–µ–º–æ–Ω—Ç–∞", "—Å—Ç–∞—Ç—É—Å_—Ä–µ–º–æ–Ω—Ç–∞", "–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞", "–¥–∞—Ç–∞_–æ–∫–æ–Ω—á–∞–Ω–∏—è", "—Ä–µ–º–æ–Ω—Ç_–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω_–Ω–∞", "–ø—Ä–∏–º–µ—á–∞–Ω–∏—è", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å") 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
        RETURNING id
      `, [bikeId, type, status, startDate, endDate, plannedDate, notes, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + executor]);
      maintenanceIds.push(result.rows[0].id);
    }
    console.log(`   ‚úÖ Inserted ${maintenanceIds.length} maintenance events`);
    
    // 7. MAINTENANCE PARTS - Parts used in some repairs
    console.log('7. Inserting maintenance parts usage...');
    const maintenancePartsData = [
      [maintenanceIds[0], partModelIds[0], 2, 850, '–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏—Ö –∏ –∑–∞–¥–Ω–∏—Ö –∫–æ–ª–æ–¥–æ–∫'],
      [maintenanceIds[1], partModelIds[1], 1, 2400, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–ø–∏ KMC'],
      [maintenanceIds[1], partModelIds[4], 1, 3200, '–ó–∞–º–µ–Ω–∞ –∫–∞—Å—Å–µ—Ç—ã'],
      [maintenanceIds[4], partModelIds[2], 1, 4500, '–ù–æ–≤–∞—è –ø–æ–∫—Ä—ã—à–∫–∞ Continental'],
      [maintenanceIds[4], partModelIds[3], 1, 650, '–ù–æ–≤–∞—è –∫–∞–º–µ—Ä–∞'],
      [maintenanceIds[5], partModelIds[9], 2, 450, '–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö —Ç—Ä–æ—Å–æ–≤'],
      [maintenanceIds[5], partModelIds[10], 2, 320, '–ù–æ–≤—ã–µ —Ä—É–±–∞—à–∫–∏ —Ç—Ä–æ—Å–æ–≤'],
      [maintenanceIds[6], partModelIds[7], 1, 3800, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–¥–ª–∞'],
      [maintenanceIds[7], partModelIds[14], 1, 750, '–°–º–∞–∑–∫–∞ —Ü–µ–ø–∏'],
      [maintenanceIds[7], partModelIds[15], 1, 1200, '–û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏'],
      [maintenanceIds[8], partModelIds[8], 2, 2900, '–ù–æ–≤—ã–µ –≥—Ä–∏–ø—Å—ã Ergon'],
      [maintenanceIds[11], partModelIds[5], 1, 5800, '–ü–µ—Ä–µ–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å Cateye'],
      [maintenanceIds[11], partModelIds[6], 1, 2100, '–ó–∞–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å Lezyne']
    ];
    
    for (const [eventId, partId, quantity, price, notes] of maintenancePartsData) {
      await client.query(`
        INSERT INTO maintenance_parts ("—Å–æ–±—ã—Ç–∏–µ_id", part_model_id, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", "—Ü–µ–Ω–∞_–∑–∞_—à—Ç", notes) 
        VALUES ($1, $2, $3, $4, $5)
      `, [eventId, partId, quantity, price, notes]);
    }
    console.log(`   ‚úÖ Inserted ${maintenancePartsData.length} maintenance parts records`);
    
    // Commit transaction
    await client.query('COMMIT');
    console.log('\nüéâ All test data inserted successfully!');
    
    // Get summary statistics
    console.log('\nüìä Database summary:');
    const summary = await client.query(`
      SELECT 
        'users' as table_name, COUNT(*) as record_count FROM users
      UNION ALL
      SELECT 'bikes' as table_name, COUNT(*) as record_count FROM bikes
      UNION ALL
      SELECT 'part_models' as table_name, COUNT(*) as record_count FROM part_models
      UNION ALL
      SELECT 'part_stock' as table_name, COUNT(*) as record_count FROM part_stock
      UNION ALL
      SELECT 'purchase_requests' as table_name, COUNT(*) as record_count FROM purchase_requests
      UNION ALL
      SELECT 'maintenance_events' as table_name, COUNT(*) as record_count FROM maintenance_events
      UNION ALL
      SELECT 'maintenance_parts' as table_name, COUNT(*) as record_count FROM maintenance_parts
      ORDER BY table_name;
    `);
    
    console.log('   üìã Record counts by table:');
    summary.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.table_name}: ${row.record_count} records`);
    });
    
    // Sample verification queries
    console.log('\nüîç Sample verification queries:');
    
    // 1. Bikes by status
    const bikeStatus = await client.query(`
      SELECT status, COUNT(*) as count 
      FROM bikes 
      GROUP BY status 
      ORDER BY count DESC;
    `);
    console.log('\n   üö≤ Bikes by status:');
    bikeStatus.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.status}: ${row.count} bikes`);
    });
    
    // 2. Parts by category
    const partCategories = await client.query(`
      SELECT category, COUNT(*) as count 
      FROM part_models 
      GROUP BY category 
      ORDER BY count DESC;
    `);
    console.log('\n   üîß Parts by category:');
    partCategories.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.category}: ${row.count} parts`);
    });
    
    // 3. Maintenance by status
    const maintenanceStatus = await client.query(`
      SELECT "—Å—Ç–∞—Ç—É—Å_—Ä–µ–º–æ–Ω—Ç–∞", COUNT(*) as count 
      FROM maintenance_events 
      GROUP BY "—Å—Ç–∞—Ç—É—Å_—Ä–µ–º–æ–Ω—Ç–∞" 
      ORDER BY count DESC;
    `);
    console.log('\n   üî® Maintenance by status:');
    maintenanceStatus.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.—Å—Ç–∞—Ç—É—Å_—Ä–µ–º–æ–Ω—Ç–∞}: ${row.count} events`);
    });
    
    // 4. Purchase requests by status
    const purchaseStatus = await client.query(`
      SELECT status, COUNT(*) as count 
      FROM purchase_requests 
      GROUP BY status 
      ORDER BY count DESC;
    `);
    console.log('\n   üìã Purchase requests by status:');
    purchaseStatus.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.status}: ${row.count} requests`);
    });
    
    // 5. Low stock parts
    const lowStock = await client.query(`
      SELECT pm.name, ps.quantity, ps.min_stock 
      FROM part_stock ps
      JOIN part_models pm ON pm.id = ps.part_model_id
      WHERE ps.quantity <= ps.min_stock
      ORDER BY ps.quantity ASC;
    `);
    console.log(`\n   ‚ö†Ô∏è  Parts with low stock (${lowStock.rows.length} items):`);
    lowStock.rows.forEach(row => {
      console.log(`      ‚Ä¢ ${row.name}: ${row.quantity} (min: ${row.min_stock})`);
    });
    
    console.log('\n‚úÖ Test data insertion completed successfully!');
    console.log('\nüí° Sample realistic data has been created with:');
    console.log('   ‚Ä¢ Mixed Russian/English names and realistic roles');
    console.log('   ‚Ä¢ Various bike brands, sizes, and statuses');
    console.log('   ‚Ä¢ Comprehensive parts catalog with realistic prices');
    console.log('   ‚Ä¢ Stock levels with some low-stock scenarios');
    console.log('   ‚Ä¢ Purchase requests in different statuses');
    console.log('   ‚Ä¢ Maintenance events with realistic repair scenarios');
    console.log('   ‚Ä¢ Parts usage tracking in maintenance events');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error inserting test data:', error.message);
    console.error('Full error details:', error);
    throw error;
  } finally {
    client.release();
  }
};

// Run the script
insertTestData()
  .then(() => {
    console.log('\nüèÅ Test data insertion completed. Closing connection...');
    pool.end();
    process.exit(0);
  })
  .catch(error => {
    console.error('\nüí• Test data insertion failed:', error.message);
    pool.end();
    process.exit(1);
  });