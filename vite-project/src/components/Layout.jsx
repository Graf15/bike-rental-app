import React, { useState } from "react";
import { Link, useLocation } from "react-router-dom";
import "./Layout.css";


const Layout = ({ children }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const location = useLocation();

  const menuItems = [
    {
      path: "/",
      icon: "üö¥",
      label: "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–º",
    },
    {
      path: "/rentals",
      icon: "üìã",
      label: "–ê—Ä–µ–Ω–¥–∞",
      description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫–∞—Ç—ã",
    },
    {
      path: "/customers",
      icon: "üë•",
      label: "–ö–ª–∏–µ–Ω—Ç—ã",
      description: "–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    },
    {
      path: "/maintenance",
      icon: "üîß",
      label: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
      description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    },
    {
      path: "/repairs-schedule",
      icon: "üìÖ",
      label: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–æ–≤",
      description: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¢–û",
    },
    {
      path: "/parts",
      icon: "üîß",
      label: "–ó–∞–ø—á–∞—Å—Ç–∏",
      description: "–°–∫–ª–∞–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π",
    },
    {
      path: "/parts-requests",
      icon: "üõí",
      label: "–ó–∞–∫—É–ø–∫–∞–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π",
      description: "–ó–∞–∫—É–ø–∫–∞–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π",
    },
    {
      path: "/users",
      icon: "üë•",
      label: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
      description: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
    },
    {
      path: "/analytics",
      icon: "üìä",
      label: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
      description: "–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    },
    {
      path: "/settings",
      icon: "‚öôÔ∏è",
      label: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
      description: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
    },
  ];

  return (
    <div className="layout">
      <aside className={`sidebar ${isCollapsed ? "collapsed" : ""}`}>
        <div className="sidebar-header">
          <button
            className="collapse-btn"
            onClick={() => setIsCollapsed(!isCollapsed)}
            title={isCollapsed ? "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é" : "–°–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é"}
          >
            {isCollapsed ? "‚Üí" : "‚Üê"}
          </button>
        </div>

        <nav className="sidebar-nav">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              className={`nav-item ${
                location.pathname === item.path ? "active" : ""
              }`}
              title={isCollapsed ? item.label : ""}
            >
              <span className="nav-icon">{item.icon}</span>
              {!isCollapsed && (
                <div className="nav-content">
                  <span className="nav-label">{item.label}</span>
                  <span className="nav-description">{item.description}</span>
                </div>
              )}
            </Link>
          ))}
        </nav>

        <div className="sidebar-footer">
          <div className={`user-info ${isCollapsed ? "collapsed" : ""}`}>
            <div className="user-avatar">üë§</div>
            {!isCollapsed && (
              <div className="user-details">
                <span className="user-name">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                <span className="user-role">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</span>
              </div>
            )}
          </div>
        </div>
      </aside>

      <main className={`main-content ${isCollapsed ? "expanded" : ""}`}>
        <div className="content-wrapper">{children}</div>
      </main>
    </div>
  );
};

export default Layout;
