import React, { useState, useRef, useEffect } from "react";
import "./Popover.css";

const BikeStatusPopover = ({ bike, onStatusChange, onCreateMaintenance }) => {
  const [isOpen, setIsOpen] = useState(false);
  const popoverRef = useRef(null);
  const triggerRef = useRef(null);

  const statuses = [
    { value: "–≤ –Ω–∞–ª–∏—á–∏–∏", label: "–í –Ω–∞–ª–∏—á–∏–∏", color: "green" },
    { value: "–≤ –ø—Ä–æ–∫–∞—Ç–µ", label: "–í –ø—Ä–æ–∫–∞—Ç–µ", color: "blue" },
    { value: "–≤ —Ä–µ–º–æ–Ω—Ç–µ", label: "–í —Ä–µ–º–æ–Ω—Ç–µ", color: "yellow" },
    { value: "–±—Ä–æ–Ω—å", label: "–ë—Ä–æ–Ω—å", color: "purple" },
    { value: "–ø—Ä–æ–¥–∞–Ω", label: "–ü—Ä–æ–¥–∞–Ω", color: "red" },
    { value: "—É–∫—Ä–∞–¥–µ–Ω", label: "–£–∫—Ä–∞–¥–µ–Ω", color: "red" },
    { value: "–Ω–µ–≤–æ–∑–≤—Ä–∞—Ç", label: "–ù–µ–≤–æ–∑–≤—Ä–∞—Ç", color: "red" },
  ];

  const currentStatus = statuses.find((s) => s.value === bike.status);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        popoverRef.current &&
        !popoverRef.current.contains(event.target) &&
        triggerRef.current &&
        !triggerRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isOpen]);

  const handleStatusClick = (newStatus) => {
    if (newStatus === "–≤ —Ä–µ–º–æ–Ω—Ç–µ") {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞
      onCreateMaintenance(bike.id);
    } else {
      // –ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
      onStatusChange(bike.id, newStatus);
    }
    setIsOpen(false);
  };

  return (
    <div className="status-popover-container">
      <button
        ref={triggerRef}
        className={`status-badge status-${bike.status.replace(
          /\s+/g,
          "-"
        )} status-clickable`}
        onClick={() => setIsOpen(!isOpen)}
      >
        {currentStatus?.label || bike.status}
        <span className="status-arrow">‚ñº</span>
      </button>

      {isOpen && (
        <div ref={popoverRef} className="status-popover">
          <div className="popover-header">
            <span>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</span>
          </div>
          <div className="status-options">
            {statuses.map((status) => (
              <button
                key={status.value}
                className={`status-option ${
                  status.value === bike.status ? "current" : ""
                }`}
                onClick={() => handleStatusClick(status.value)}
              >
                <span
                  className={`status-indicator status-${status.color}`}
                ></span>
                {status.label}
                {status.value === bike.status && (
                  <span className="current-mark">‚úì</span>
                )}
              </button>
            ))}
          </div>

          {bike.status !== "–≤ —Ä–µ–º–æ–Ω—Ç–µ" && (
            <>
              <div className="popover-divider"></div>
              <div className="popover-actions">
                <button
                  className="action-button maintenance-action"
                  onClick={() => {
                    onCreateMaintenance(bike.id);
                    setIsOpen(false);
                  }}
                >
                  üîß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–µ–º–æ–Ω—Ç
                </button>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default BikeStatusPopover;
